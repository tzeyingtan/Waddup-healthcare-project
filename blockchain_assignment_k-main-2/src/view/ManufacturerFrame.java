/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import blockchain_assignment.Blockchain_Assignment;
import static blockchain_assignment.Blockchain_Assignment.distributorController;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.security.Key;
import java.security.PrivateKey;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Base64;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Distributor;
import model.Manufacturer;
import util.Block;
import util.Blockchain;
import util.Helper;
import util.KeyAccess;
import util.MySignature;
import util.RandomSecretKey;
import util.Symmetric;
import util.TransactionCollection;

/**
 *
 * @author vinie
 */
public class ManufacturerFrame extends javax.swing.JFrame {
//    private static User user;

    private static Manufacturer manufacturer;
    private static String selectedBatch;

    /**
     * Creates new form ManufacturerFrame
     *
     * @param manufacturerCurrent
     */
    public ManufacturerFrame(Manufacturer manufacturerCurrent) {
        initComponents();
        manufacturer = manufacturerCurrent;
        selectedBatch = "";
        loadProductTable(manufacturer.getID());
        loadCompanyName();
        loadDistributor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void loadCompanyName() {

        lblName.setText(manufacturer.getName()); // Set the company name to the label
    }

    private void loadProductTable(String ID) {
        try {
            // Retrieve the user ID of the currently logged-in user

            // Check if the blockchain file exists
            DefaultTableModel model = (DefaultTableModel) tableProducts.getModel();
            DefaultTableModel model2 = (DefaultTableModel) tableProducts1.getModel();
            DefaultTableModel model3 = (DefaultTableModel) tableProducts2.getModel();
            model.setRowCount(0);
            model2.setRowCount(0);
            model3.setRowCount(0);
            File blockchainFile = new File("src/On_Chain/Blockchain.bin");
            if (!blockchainFile.exists()) {
                // If the file doesn't exist, display "No products found" in the table
                model.addRow(new Object[]{"No products found"});
                model2.addRow(new Object[]{"No products found"});
                model3.addRow(new Object[]{"No products found"});
                return;
            }

            // Retrieve product information from the blockchain
            Blockchain blockchain = Blockchain.getInstance("src/On_Chain/Blockchain.bin");
            LinkedList<Block> blockchainData = blockchain.get();
            // Flag to check if any product created by the logged-in user is found
            boolean productsFound = false;

            Symmetric symm = new Symmetric();
            Key secretKey = RandomSecretKey.getSecretKey();

            // Iterate through all blocks in the blockchain
            for (Block block : blockchainData) {
                TransactionCollection transactionCollection = block.getTransactionCollection();
                if (transactionCollection != null) {
                    // Assuming TransactionCollection contains a list of products
                    ArrayList<String> products = transactionCollection.getTranxList();
                    // Add product info to the table if the user ID matches the logged-in user
                    for (String product : products) {
                        String decryptedData = symm.decrypt(product, secretKey);
                        String[] productInfo = decryptedData.split("\\|");
                        // Check if productInfo contains at least 4 fields (ID, Name, Description, and UserID)
                        if (productInfo.length >= 6 && productInfo[5].equals(ID)) {
                            // Add the product information to the table
                            model.addRow(new Object[]{productInfo[1], productInfo[2], productInfo[3], productInfo[4]});
                            model2.addRow(new Object[]{productInfo[1], productInfo[2], productInfo[3], productInfo[4]});
                            model3.addRow(new Object[]{productInfo[1], productInfo[2], productInfo[3], productInfo[4]});
                            productsFound = true;
                        }
                    }
                }
            }

            // If no products created by the logged-in user were found, display "No products found"
            if (!productsFound) {
                model.addRow(new Object[]{"No products found"});
                model2.addRow(new Object[]{"No products found"});
                model3.addRow(new Object[]{"No products found"});
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while updating product table: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadDistributor() {
        try {
            DefaultTableModel model = (DefaultTableModel) tableDistributor.getModel();
            model.setRowCount(0);

            for (Distributor d : Blockchain_Assignment.distributorController.getAllDistributor()) {
                model.addRow(new Object[]{d.getID(), d.getName(), d.getContact(), d.getCode()});
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading distributor data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int calculateQuantity(String targetCode) {
        int totalQuantity = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader("src/Off_Chain/TransactionPoolMD"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\\|"); // 使用双反斜杠转义分隔符
                String Code = parts[5]; // 获取UPC
                if (Code.equals(targetCode)) {
                    totalQuantity += Integer.parseInt(parts[6]); // 获取数量并累加
                }

            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        return totalQuantity;
    }

    private int calculateSoldQuantity(String targetBatchCode) {
        try {
            int soldQuantity = 0;
            // Retrieve blockchain data
            Blockchain blockchain = Blockchain.getInstance("src/On_Chain/Blockchain.bin");
            LinkedList<Block> blockchainData = blockchain.get();

            Symmetric symm = new Symmetric();
            Key secretKey = RandomSecretKey.getSecretKey();

            // Iterate through the blockchain to find sold quantities
            for (Block block : blockchainData) {
                TransactionCollection transactionCollection = block.getTransactionCollection();
                if (transactionCollection != null) {
                    ArrayList<String> transactions = transactionCollection.getTranxList();
                    for (String transaction : transactions) {
                        String decrypted = symm.decrypt(transaction, secretKey);
                        String[] transactionInfo = decrypted.split("\\|");
                        // Check if the transaction is for the specified batch code and has the right type (003)
                        if ("003".equals(transactionInfo[0]) && transactionInfo[4].equals(targetBatchCode)) {
                            // Increment sold quantity by the amount specified in the transaction
                            soldQuantity += Integer.parseInt(transactionInfo[5]);
                        }
                    }
                }
            }
            return soldQuantity;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    private void resetDistribution() {
        tabDistribute1.setSelectedIndex(0);
        tabDistribute1.setEnabledAt(3, false);
        tabDistribute1.setEnabledAt(1, false);
        tabDistribute1.setEnabledAt(2, false);
        tableProducts2.clearSelection();
        tableBatch2.clearSelection();
        tableDistributor.clearSelection();
        jLabel54.setText("-");
        jLabel56.setText("-");
        selectedBatchNumberLabel.setText("-");
        jLabel61.setText("-");
        txtDISQuantity.setText("");
        productIDSummaryLabel.setText("-");
        productNameSummaryLabel.setText("-");
        batchCodeSummaryLabel.setText("-");
        upcSummaryLabel.setText("-");
        jLabel78.setText("-");
        priceLabel.setText("-");
        jLabel80.setText("-");
        jLabel79.setText("-");
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabBooking = new javax.swing.JTabbedPane();
        pnlBookRoom1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableProducts = new javax.swing.JTable();
        lblRapidCar1 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableBatch = new javax.swing.JTable();
        lblRapidCar6 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        btnResetSelection = new javax.swing.JButton();
        selectedBatchNumber = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAddProduct = new javax.swing.JButton();
        txtProductName = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        lblRapidCar3 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        txtDesc = new javax.swing.JTextField();
        btnClearAddPro = new javax.swing.JButton();
        pnlBookRoom2 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        txtBatchCode = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        lblRapidCar4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableProducts1 = new javax.swing.JTable();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtPDate = new javax.swing.JTextField();
        txtEDate = new javax.swing.JTextField();
        btnAddBatch = new javax.swing.JButton();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnResetSelection1 = new javax.swing.JButton();
        pnlBookRoom3 = new javax.swing.JPanel();
        tabDistribute1 = new javax.swing.JTabbedPane();
        pnlBookRoom5 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tableProducts2 = new javax.swing.JTable();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        btnSelectProduct = new javax.swing.JButton();
        btnClearAddPro2 = new javax.swing.JButton();
        jLabel56 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnSelectBatch = new javax.swing.JButton();
        btnClearAddPro1 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableBatch2 = new javax.swing.JTable();
        selectedBatchNumberLabel = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        btnClearAddPro3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnSelectBatch1 = new javax.swing.JButton();
        btnClearAddPro4 = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        tableDistributor = new javax.swing.JTable();
        jLabel61 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        btnClearAddPro5 = new javax.swing.JButton();
        txtDISQuantity = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        pnlBookRoom6 = new javax.swing.JPanel();
        jLabel59 = new javax.swing.JLabel();
        lblRapidCar11 = new javax.swing.JLabel();
        btnAddBatch1 = new javax.swing.JButton();
        btnConfirmDistribution = new javax.swing.JButton();
        jLabel67 = new javax.swing.JLabel();
        productIDSummaryLabel = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        productNameSummaryLabel = new javax.swing.JLabel();
        batchCodeSummaryLabel = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        upcSummaryLabel = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        btnClearAddPro6 = new javax.swing.JButton();
        jLabel82 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        lblRapidCar12 = new javax.swing.JLabel();
        pnlBookRoom4 = new javax.swing.JPanel();
        lblRapidCar5 = new javax.swing.JLabel();
        btnSearchUPC = new javax.swing.JButton();
        txtBookingID7 = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableDetails = new javax.swing.JTable();
        lblRapidCar7 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tableBatch1 = new javax.swing.JTable();
        jLabel57 = new javax.swing.JLabel();
        selectedBatch1 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        btnDisReset = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        tableDetails1 = new javax.swing.JTable();
        lblRapidCar8 = new javax.swing.JLabel();
        lblRapidCar2 = new javax.swing.JLabel();
        btnAddProduct1 = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabBooking.setBackground(new java.awt.Color(0, 204, 204));
        tabBooking.setForeground(new java.awt.Color(255, 255, 255));
        tabBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabBookingMouseClicked(evt);
            }
        });

        pnlBookRoom1.setBackground(new java.awt.Color(227, 235, 238));

        tableProducts.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Description", "UPC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableProductsMouseEntered(evt);
            }
        });
        jScrollPane4.setViewportView(tableProducts);

        lblRapidCar1.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar1.setFont(new java.awt.Font("Poppins Medium", 1, 20)); // NOI18N
        lblRapidCar1.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar1.setText("Batch");

        tableBatch.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableBatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch Number", "Price", "Date Added", "Production Date", "Expiry Date", "Total Quantity", "Stock On Hold", "Available Stock", "Sold", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableBatch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBatchMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tableBatch);

        lblRapidCar6.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar6.setFont(new java.awt.Font("Poppins Medium", 1, 24)); // NOI18N
        lblRapidCar6.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar6.setText("Product");

        jLabel51.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel51.setText("-");

        jLabel52.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel52.setText("Product:");

        jLabel53.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(153, 0, 51));
        jLabel53.setText("* Choose a product to view batch");

        btnResetSelection.setBackground(new java.awt.Color(0, 204, 204));
        btnResetSelection.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnResetSelection.setForeground(new java.awt.Color(255, 255, 255));
        btnResetSelection.setText("Reset");
        btnResetSelection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetSelectionMouseExited(evt);
            }
        });
        btnResetSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetSelectionActionPerformed(evt);
            }
        });

        selectedBatchNumber.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        selectedBatchNumber.setText("-");

        javax.swing.GroupLayout pnlBookRoom1Layout = new javax.swing.GroupLayout(pnlBookRoom1);
        pnlBookRoom1.setLayout(pnlBookRoom1Layout);
        pnlBookRoom1Layout.setHorizontalGroup(
            pnlBookRoom1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(pnlBookRoom1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlBookRoom1Layout.createSequentialGroup()
                        .addComponent(lblRapidCar1)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel53)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel52)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlBookRoom1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRapidCar6)))
                .addGap(18, 18, 18))
            .addGroup(pnlBookRoom1Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(selectedBatchNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBookRoom1Layout.setVerticalGroup(
            pnlBookRoom1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblRapidCar6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBookRoom1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnResetSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel52)
                    .addComponent(jLabel51)
                    .addComponent(jLabel53)
                    .addComponent(lblRapidCar1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedBatchNumber)
                .addGap(21, 21, 21))
        );

        tabBooking.addTab("Product", pnlBookRoom1);

        jPanel2.setBackground(new java.awt.Color(227, 235, 238));

        btnAddProduct.setBackground(new java.awt.Color(0, 204, 204));
        btnAddProduct.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnAddProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnAddProduct.setText("Add");
        btnAddProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddProductMouseExited(evt);
            }
        });
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        txtProductName.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtProductName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtProductName.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtProductName.setPreferredSize(new java.awt.Dimension(21, 28));
        txtProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductNameActionPerformed(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel42.setText("Product Name");

        lblRapidCar3.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar3.setFont(new java.awt.Font("Poppins Medium", 1, 24)); // NOI18N
        lblRapidCar3.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar3.setText("Add Product");

        jLabel43.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel43.setText("Description");

        txtDesc.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtDesc.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtDesc.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtDesc.setPreferredSize(new java.awt.Dimension(21, 28));
        txtDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescActionPerformed(evt);
            }
        });

        btnClearAddPro.setBackground(new java.awt.Color(255, 153, 102));
        btnClearAddPro.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnClearAddPro.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAddPro.setText("Clear");
        btnClearAddPro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearAddProMouseExited(evt);
            }
        });
        btnClearAddPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAddProActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRapidCar3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnClearAddPro))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel43)
                                .addComponent(jLabel42))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtProductName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(558, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblRapidCar3)
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(txtDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearAddPro, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(209, Short.MAX_VALUE))
        );

        tabBooking.addTab("Add Product", jPanel2);

        pnlBookRoom2.setBackground(new java.awt.Color(227, 235, 238));

        jLabel44.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel44.setText("Batch Number");

        jLabel45.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel45.setText("Price");

        txtBatchCode.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtBatchCode.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtBatchCode.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtBatchCode.setPreferredSize(new java.awt.Dimension(21, 28));
        txtBatchCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBatchCodeActionPerformed(evt);
            }
        });

        txtPrice.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtPrice.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPrice.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtPrice.setPreferredSize(new java.awt.Dimension(21, 28));
        txtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceActionPerformed(evt);
            }
        });

        lblRapidCar4.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar4.setFont(new java.awt.Font("Poppins Medium", 1, 24)); // NOI18N
        lblRapidCar4.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar4.setText("Add Batch");

        tableProducts1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableProducts1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Description", "UPC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProducts1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProducts1MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableProducts1);

        jLabel46.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel46.setText("1 - Choose Product");

        jLabel47.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel47.setText("2 - Fill Batch Info");

        jLabel48.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel48.setText("Expiry Date");

        txtPDate.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtPDate.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPDate.setText("yyyy-mm-dd");
        txtPDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtPDate.setPreferredSize(new java.awt.Dimension(21, 28));
        txtPDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPDateActionPerformed(evt);
            }
        });

        txtEDate.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtEDate.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtEDate.setText("yyyy-mm-dd");
        txtEDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtEDate.setPreferredSize(new java.awt.Dimension(21, 28));
        txtEDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEDateActionPerformed(evt);
            }
        });

        btnAddBatch.setBackground(new java.awt.Color(0, 204, 204));
        btnAddBatch.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnAddBatch.setForeground(new java.awt.Color(255, 255, 255));
        btnAddBatch.setText("Add");
        btnAddBatch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddBatchMouseExited(evt);
            }
        });
        btnAddBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBatchActionPerformed(evt);
            }
        });

        jLabel49.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel49.setText("Production Date");

        jLabel50.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel50.setText("Quantity");

        txtQuantity.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtQuantity.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtQuantity.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtQuantity.setPreferredSize(new java.awt.Dimension(21, 28));
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        btnResetSelection1.setBackground(new java.awt.Color(255, 153, 102));
        btnResetSelection1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnResetSelection1.setForeground(new java.awt.Color(255, 255, 255));
        btnResetSelection1.setText("Reset");
        btnResetSelection1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetSelection1MouseExited(evt);
            }
        });
        btnResetSelection1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetSelection1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBookRoom2Layout = new javax.swing.GroupLayout(pnlBookRoom2);
        pnlBookRoom2.setLayout(pnlBookRoom2Layout);
        pnlBookRoom2Layout.setHorizontalGroup(
            pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookRoom2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47)
                    .addComponent(jLabel46)
                    .addComponent(lblRapidCar4)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 834, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlBookRoom2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBookRoom2Layout.createSequentialGroup()
                                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBatchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel44))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel45)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel50)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPDate, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel49))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel48)
                                    .addComponent(txtEDate, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlBookRoom2Layout.createSequentialGroup()
                                .addComponent(btnAddBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnResetSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 42, Short.MAX_VALUE))
        );
        pnlBookRoom2Layout.setVerticalGroup(
            pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblRapidCar4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel46)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBookRoom2Layout.createSequentialGroup()
                        .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel44)
                            .addComponent(jLabel45))
                        .addGap(6, 6, 6)
                        .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBatchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlBookRoom2Layout.createSequentialGroup()
                        .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel50)
                            .addComponent(jLabel49)
                            .addComponent(jLabel48))
                        .addGap(6, 6, 6)
                        .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30)
                .addGroup(pnlBookRoom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64))
        );

        tabBooking.addTab("Add Batch", pnlBookRoom2);

        pnlBookRoom3.setBackground(new java.awt.Color(227, 235, 238));

        tabDistribute1.setBackground(new java.awt.Color(0, 204, 204));
        tabDistribute1.setForeground(new java.awt.Color(255, 255, 255));

        pnlBookRoom5.setBackground(new java.awt.Color(227, 235, 250));

        tableProducts2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableProducts2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Description", "UPC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProducts2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProducts2MouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tableProducts2);

        jLabel54.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel54.setText("-");

        jLabel55.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel55.setText("Selected UPC:");

        btnSelectProduct.setBackground(new java.awt.Color(0, 204, 204));
        btnSelectProduct.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSelectProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnSelectProduct.setText("Confirm");
        btnSelectProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSelectProductMouseExited(evt);
            }
        });
        btnSelectProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectProductActionPerformed(evt);
            }
        });

        btnClearAddPro2.setBackground(new java.awt.Color(255, 153, 102));
        btnClearAddPro2.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnClearAddPro2.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAddPro2.setText("Reset");
        btnClearAddPro2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearAddPro2MouseExited(evt);
            }
        });
        btnClearAddPro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAddPro2ActionPerformed(evt);
            }
        });

        jLabel56.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel56.setText("-");

        jLabel60.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel60.setText("Selected Product ID:");

        javax.swing.GroupLayout pnlBookRoom5Layout = new javax.swing.GroupLayout(pnlBookRoom5);
        pnlBookRoom5.setLayout(pnlBookRoom5Layout);
        pnlBookRoom5Layout.setHorizontalGroup(
            pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookRoom5Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlBookRoom5Layout.createSequentialGroup()
                        .addGroup(pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel60, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlBookRoom5Layout.createSequentialGroup()
                                .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(220, 220, 220)
                                .addComponent(btnSelectProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnClearAddPro2)))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        pnlBookRoom5Layout.setVerticalGroup(
            pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookRoom5Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addGroup(pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBookRoom5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClearAddPro2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelectProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(pnlBookRoom5Layout.createSequentialGroup()
                        .addGroup(pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel54))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBookRoom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel56))
                        .addContainerGap(15, Short.MAX_VALUE))))
        );

        tabDistribute1.addTab("1 - Select Product", pnlBookRoom5);

        jPanel3.setBackground(new java.awt.Color(227, 235, 250));

        btnSelectBatch.setBackground(new java.awt.Color(0, 204, 204));
        btnSelectBatch.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSelectBatch.setForeground(new java.awt.Color(255, 255, 255));
        btnSelectBatch.setText("Confirm");
        btnSelectBatch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSelectBatchMouseExited(evt);
            }
        });
        btnSelectBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectBatchActionPerformed(evt);
            }
        });

        btnClearAddPro1.setBackground(new java.awt.Color(255, 153, 102));
        btnClearAddPro1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnClearAddPro1.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAddPro1.setText("Reset");
        btnClearAddPro1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearAddPro1MouseExited(evt);
            }
        });
        btnClearAddPro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAddPro1ActionPerformed(evt);
            }
        });

        tableBatch2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableBatch2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch Number", "Price", "Date Added", "Production Date", "Expiry Date", "Total Quantity", "Stock On Hold", "Available Stock", "Sold", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableBatch2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBatch2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableBatch2MouseEntered(evt);
            }
        });
        jScrollPane12.setViewportView(tableBatch2);

        selectedBatchNumberLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        selectedBatchNumberLabel.setText("-");

        jLabel58.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel58.setText("Selected Batch Number:");

        btnClearAddPro3.setBackground(new java.awt.Color(255, 153, 102));
        btnClearAddPro3.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnClearAddPro3.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAddPro3.setText("Back");
        btnClearAddPro3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearAddPro3MouseExited(evt);
            }
        });
        btnClearAddPro3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAddPro3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedBatchNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSelectBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearAddPro1)
                        .addGap(24, 24, 24)
                        .addComponent(btnClearAddPro3)
                        .addGap(60, 60, 60))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearAddPro3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearAddPro1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedBatchNumberLabel))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        tabDistribute1.addTab("2 - Select Batch", jPanel3);

        jPanel4.setBackground(new java.awt.Color(227, 235, 250));

        btnSelectBatch1.setBackground(new java.awt.Color(0, 204, 204));
        btnSelectBatch1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSelectBatch1.setForeground(new java.awt.Color(255, 255, 255));
        btnSelectBatch1.setText("Confirm");
        btnSelectBatch1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSelectBatch1MouseExited(evt);
            }
        });
        btnSelectBatch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectBatch1ActionPerformed(evt);
            }
        });

        btnClearAddPro4.setBackground(new java.awt.Color(255, 153, 102));
        btnClearAddPro4.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnClearAddPro4.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAddPro4.setText("Reset");
        btnClearAddPro4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearAddPro4MouseExited(evt);
            }
        });
        btnClearAddPro4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAddPro4ActionPerformed(evt);
            }
        });

        tableDistributor.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableDistributor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Company Name", "Contact Number", "Company Registration Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDistributor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDistributorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableDistributorMouseEntered(evt);
            }
        });
        jScrollPane13.setViewportView(tableDistributor);

        jLabel61.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel61.setText("-");

        jLabel66.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel66.setText("Selected Distributer ID:");

        btnClearAddPro5.setBackground(new java.awt.Color(255, 153, 102));
        btnClearAddPro5.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnClearAddPro5.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAddPro5.setText("Back");
        btnClearAddPro5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearAddPro5MouseExited(evt);
            }
        });
        btnClearAddPro5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAddPro5ActionPerformed(evt);
            }
        });

        txtDISQuantity.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtDISQuantity.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtDISQuantity.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtDISQuantity.setPreferredSize(new java.awt.Dimension(21, 28));
        txtDISQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDISQuantityActionPerformed(evt);
            }
        });

        jLabel81.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel81.setText("Quantity:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel81)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDISQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSelectBatch1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearAddPro4)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearAddPro5)))
                .addGap(19, 19, 19))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSelectBatch1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnClearAddPro4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnClearAddPro5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel61)
                        .addComponent(txtDISQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );

        tabDistribute1.addTab("3 - Select Receiver", jPanel4);

        pnlBookRoom6.setBackground(new java.awt.Color(227, 235, 250));

        jLabel59.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel59.setText("Distributor ID:");

        lblRapidCar11.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar11.setFont(new java.awt.Font("Poppins Medium", 1, 24)); // NOI18N
        lblRapidCar11.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar11.setText("Summary");

        btnAddBatch1.setBackground(new java.awt.Color(255, 153, 102));
        btnAddBatch1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnAddBatch1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddBatch1.setText("Cancel");
        btnAddBatch1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddBatch1MouseExited(evt);
            }
        });
        btnAddBatch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBatch1ActionPerformed(evt);
            }
        });

        btnConfirmDistribution.setBackground(new java.awt.Color(0, 204, 204));
        btnConfirmDistribution.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnConfirmDistribution.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmDistribution.setText("Confirm");
        btnConfirmDistribution.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnConfirmDistributionMouseExited(evt);
            }
        });
        btnConfirmDistribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmDistributionActionPerformed(evt);
            }
        });

        jLabel67.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel67.setText("Product ID:");

        productIDSummaryLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        productIDSummaryLabel.setText("-");

        jLabel69.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel69.setText("Product Name:");

        productNameSummaryLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        productNameSummaryLabel.setText("-");

        batchCodeSummaryLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        batchCodeSummaryLabel.setText("-");

        jLabel72.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel72.setText("Product UPC:");

        jLabel73.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel73.setText("Batch No:");

        upcSummaryLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        upcSummaryLabel.setText("-");

        jLabel75.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel75.setText("Quantity:");

        jLabel76.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel76.setForeground(new java.awt.Color(0, 204, 204));
        jLabel76.setText("Receiver Details");

        jLabel77.setBackground(new java.awt.Color(0, 204, 204));
        jLabel77.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(0, 204, 204));
        jLabel77.setText("Product Details");

        jLabel78.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel78.setText("-");

        jLabel62.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel62.setText("Company Name:");

        jLabel79.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel79.setText("-");

        jLabel80.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel80.setText("-");

        btnClearAddPro6.setBackground(new java.awt.Color(255, 153, 102));
        btnClearAddPro6.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnClearAddPro6.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAddPro6.setText("Back");
        btnClearAddPro6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearAddPro6MouseExited(evt);
            }
        });
        btnClearAddPro6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAddPro6ActionPerformed(evt);
            }
        });

        jLabel82.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel82.setText("Total Price:");

        priceLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        priceLabel.setText("-");

        javax.swing.GroupLayout pnlBookRoom6Layout = new javax.swing.GroupLayout(pnlBookRoom6);
        pnlBookRoom6.setLayout(pnlBookRoom6Layout);
        pnlBookRoom6Layout.setHorizontalGroup(
            pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookRoom6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel77)
                    .addComponent(lblRapidCar11)
                    .addComponent(jLabel76)
                    .addGroup(pnlBookRoom6Layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(btnConfirmDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddBatch1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClearAddPro6))
                    .addGroup(pnlBookRoom6Layout.createSequentialGroup()
                        .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlBookRoom6Layout.createSequentialGroup()
                                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel62)
                                    .addComponent(jLabel59))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel80, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(jLabel79, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlBookRoom6Layout.createSequentialGroup()
                                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel67)
                                    .addComponent(jLabel69))
                                .addGap(23, 23, 23)
                                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(productIDSummaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                                    .addComponent(productNameSummaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel73)
                                    .addComponent(jLabel72))
                                .addGap(42, 42, 42)
                                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(batchCodeSummaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                    .addComponent(upcSummaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBookRoom6Layout.createSequentialGroup()
                                .addComponent(jLabel82)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBookRoom6Layout.createSequentialGroup()
                                .addComponent(jLabel75)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        pnlBookRoom6Layout.setVerticalGroup(
            pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom6Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(lblRapidCar11)
                .addGap(18, 18, 18)
                .addComponent(jLabel77)
                .addGap(18, 18, 18)
                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel67)
                    .addComponent(productIDSummaryLabel)
                    .addComponent(batchCodeSummaryLabel)
                    .addComponent(jLabel73)
                    .addComponent(jLabel75)
                    .addComponent(jLabel78))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel69)
                    .addComponent(productNameSummaryLabel)
                    .addComponent(jLabel72)
                    .addComponent(upcSummaryLabel)
                    .addComponent(jLabel82)
                    .addComponent(priceLabel))
                .addGap(18, 18, 18)
                .addComponent(jLabel76)
                .addGap(18, 18, 18)
                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel59)
                    .addComponent(jLabel80))
                .addGap(15, 15, 15)
                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel62)
                    .addComponent(jLabel79))
                .addGap(54, 54, 54)
                .addGroup(pnlBookRoom6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBatch1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirmDistribution, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearAddPro6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        tabDistribute1.addTab("4 - Distribute", pnlBookRoom6);

        lblRapidCar12.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar12.setFont(new java.awt.Font("Poppins Medium", 1, 24)); // NOI18N
        lblRapidCar12.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar12.setText("Distribute");

        javax.swing.GroupLayout pnlBookRoom3Layout = new javax.swing.GroupLayout(pnlBookRoom3);
        pnlBookRoom3.setLayout(pnlBookRoom3Layout);
        pnlBookRoom3Layout.setHorizontalGroup(
            pnlBookRoom3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom3Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(pnlBookRoom3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRapidCar12)
                    .addComponent(tabDistribute1, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        pnlBookRoom3Layout.setVerticalGroup(
            pnlBookRoom3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblRapidCar12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabDistribute1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        tabBooking.addTab("Distribute Batch", pnlBookRoom3);

        pnlBookRoom4.setBackground(new java.awt.Color(227, 235, 238));

        lblRapidCar5.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar5.setFont(new java.awt.Font("Poppins Medium", 1, 24)); // NOI18N
        lblRapidCar5.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar5.setText("Inventory Distribution");

        btnSearchUPC.setBackground(new java.awt.Color(0, 204, 204));
        btnSearchUPC.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnSearchUPC.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchUPC.setText("Search");
        btnSearchUPC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSearchUPCMouseExited(evt);
            }
        });
        btnSearchUPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchUPCActionPerformed(evt);
            }
        });

        txtBookingID7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtBookingID7.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtBookingID7.setText("UPC...");
        txtBookingID7.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        txtBookingID7.setPreferredSize(new java.awt.Dimension(21, 28));
        txtBookingID7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBookingID7ActionPerformed(evt);
            }
        });

        tableDetails.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company ID", "Company Name", "Company Code", "Company Contact", "Purchase Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDetailsMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tableDetails);

        lblRapidCar7.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar7.setFont(new java.awt.Font("Poppins Medium", 1, 18)); // NOI18N
        lblRapidCar7.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar7.setText("Sold");

        tableBatch1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableBatch1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch Number", "Price", "Date Added", "Production Date", "Expiry Date", "Total Quantity", "Stock On Hold", "Available Stock", "Sold", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableBatch1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBatch1MouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tableBatch1);

        jLabel57.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(153, 0, 51));
        jLabel57.setText("* Search a product to view distribution");

        selectedBatch1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        selectedBatch1.setText("-");

        jLabel63.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel63.setText("Selected Batch No: ");

        btnDisReset.setBackground(new java.awt.Color(0, 204, 204));
        btnDisReset.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnDisReset.setForeground(new java.awt.Color(255, 255, 255));
        btnDisReset.setText("Reset");
        btnDisReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDisResetMouseExited(evt);
            }
        });
        btnDisReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisResetActionPerformed(evt);
            }
        });

        tableDetails1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tableDetails1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company ID", "Company Name", "Company Code", "Company Contact", "Purchase Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDetails1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDetails1MouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(tableDetails1);

        lblRapidCar8.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar8.setFont(new java.awt.Font("Poppins Medium", 1, 18)); // NOI18N
        lblRapidCar8.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar8.setText("On Hold");

        javax.swing.GroupLayout pnlBookRoom4Layout = new javax.swing.GroupLayout(pnlBookRoom4);
        pnlBookRoom4.setLayout(pnlBookRoom4Layout);
        pnlBookRoom4Layout.setHorizontalGroup(
            pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane10)
                    .addGroup(pnlBookRoom4Layout.createSequentialGroup()
                        .addComponent(lblRapidCar5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jLabel57)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBookingID7, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchUPC)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlBookRoom4Layout.createSequentialGroup()
                        .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlBookRoom4Layout.createSequentialGroup()
                                .addComponent(lblRapidCar7, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel63)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectedBatch1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlBookRoom4Layout.createSequentialGroup()
                                .addComponent(lblRapidCar8, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDisReset))
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(22, 22, 22))
        );
        pnlBookRoom4Layout.setVerticalGroup(
            pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom4Layout.createSequentialGroup()
                .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBookRoom4Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearchUPC, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel57)
                            .addComponent(txtBookingID7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBookRoom4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblRapidCar5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBookRoom4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRapidCar7)
                            .addComponent(lblRapidCar8)
                            .addComponent(jLabel63)
                            .addComponent(selectedBatch1)))
                    .addGroup(pnlBookRoom4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDisReset, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBookRoom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        tabBooking.addTab("Inventory Distribution", pnlBookRoom4);

        lblRapidCar2.setBackground(new java.awt.Color(0, 204, 204));
        lblRapidCar2.setFont(new java.awt.Font("Poppins Medium", 3, 24)); // NOI18N
        lblRapidCar2.setForeground(new java.awt.Color(0, 204, 204));
        lblRapidCar2.setText("Manufacturer");

        btnAddProduct1.setBackground(new java.awt.Color(153, 0, 51));
        btnAddProduct1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        btnAddProduct1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddProduct1.setText("Logout");
        btnAddProduct1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddProduct1MouseExited(evt);
            }
        });
        btnAddProduct1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProduct1ActionPerformed(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        lblName.setText("Company Name");

        lblName1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        lblName1.setText("Welcome Back,");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabBooking, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRapidCar2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddProduct1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblName1)
                                .addGap(18, 18, 18)
                                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnAddProduct1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(lblName1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblRapidCar2)))
                .addGap(18, 18, 18)
                .addComponent(tabBooking, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductsMouseClicked
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tableProducts.getModel();
            int selectedRow = tableProducts.getSelectedRow();

            if (selectedRow >= 0) {
                jLabel51.setText((String) tableModel.getValueAt(selectedRow, 0));
                String selectedProductUPC = (String) tableModel.getValueAt(selectedRow, 3);
                DefaultTableModel batchTableModel = (DefaultTableModel) tableBatch.getModel();

                // Clear existing data in the table
                batchTableModel.setRowCount(0);

                // Retrieve blockchain data
                Blockchain blockchain = Blockchain.getInstance("src/On_Chain/Blockchain.bin");
                LinkedList<Block> blockchainData = blockchain.get();

                // Flag to track if any batch is found for the selected product ID
                boolean batchFound = false;

                Symmetric symm = new Symmetric();
                Key secretKey = RandomSecretKey.getSecretKey();

                // Iterate through the blockchain to find batch info
                for (Block block : blockchainData) {
                    TransactionCollection transactionCollection = block.getTransactionCollection();
                    if (transactionCollection != null) {
                        ArrayList<String> transactions = transactionCollection.getTranxList();
                        for (String transaction : transactions) {
                            String decryptedData = symm.decrypt(transaction, secretKey);
                            String[] transactionInfo = decryptedData.split("\\|");
                            if ("002".equals(transactionInfo[0]) && transactionInfo[3].equals(selectedProductUPC)) {
                                // Batch info found for the selected product ID
                                batchFound = true;
                                String batchCode = transactionInfo[4];
                                String price = transactionInfo[5];
                                String dateAdded = transactionInfo[9];
                                String productionDate = transactionInfo[7];
                                String expiryDate = transactionInfo[8];
                                String quantity = transactionInfo[6];
//                            String status = transactionInfo[13];

                                int totalQuantityFromPool = calculateQuantity(batchCode);
                                int sold = calculateSoldQuantity(batchCode);
                                int availableStock = Integer.parseInt(quantity) - totalQuantityFromPool - sold;

                                String status = "-";
                                if (availableStock <= 0) {
                                    status = "Out of Stock";
                                } else {
                                    status = "In Stock";
                                }
//
//                            if (status.equals("RECALL")) {
//                                status = "RECALL";
//                                availableStock = 0;
//                            }
                                // Add batch info to the table
                                batchTableModel.addRow(new Object[]{batchCode, price, dateAdded, productionDate, expiryDate, quantity, totalQuantityFromPool, availableStock, sold, status});
                            }
                        }
                    }
                }

                // If no batch is found, display a message in the table
                if (!batchFound) {
                    batchTableModel.addRow(new Object[]{"No Batch Found", "", "", "", "", ""});
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tableProductsMouseClicked

    private void tableBatchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBatchMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tableBatch.getModel();
        int selectedRow = tableBatch.getSelectedRow();

        if (selectedRow >= 0) {
            String batchNumber = (String) tableModel.getValueAt(selectedRow, 0);
            selectedBatchNumber.setText(batchNumber);
        }
    }//GEN-LAST:event_tableBatchMouseClicked

    private void btnAddProductMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddProductMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddProductMouseExited

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        try {
            // Retrieve input for product name and description
            String productName = txtProductName.getText();
            String productDesc = txtDesc.getText();
            String type = "001";
            // Auto Generate Product ID
            String productId = Helper.generateID("PRODUCT");
            String productUPC = Helper.generateID("PUPC");
//                    generateProductId();
            System.out.println("New Product ID: " + productId + "  |  UPC: " + productUPC);

            // Get Manufacturer ID as userID
//            String manufacturerID = userID; // Assuming userID is already set in the class
            // Read the Users.txt file to get the public and private key paths
            String publicKeyPath = manufacturer.getPublicKeyPath();
            String privateKeyPath = manufacturer.getPrivateKeyPath();
            String todayDate = LocalDate.now().toString();

            if (publicKeyPath.isEmpty() || privateKeyPath.isEmpty()) {
                // Handle the case where the public/private key paths are not found
                // You may throw an exception, log an error, or handle it based on your application's logic
                // Optionally, show an error message to the user
                JOptionPane.showMessageDialog(this, "Public/private key paths not found for the user ID: " + manufacturer.getID(), "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method
            }

            // Generate data string for the product
            String productData = type + "|" + productId + "|" + productName + "|" + productDesc + "|" + productUPC + "|" + manufacturer.getID() + "|" + manufacturer.getName() + "|" + manufacturer.getContact() + "|" + manufacturer.getCode() + "|" + todayDate;

            // Call addBlock method to handle the addition
            TransactionCollection transactionCollection = Helper.signTransaction(productData, privateKeyPath);
            String transactionData = transactionCollection.getTranxList().get(0);
            boolean isVerified = Helper.systemVerifyTransaction(transactionData, publicKeyPath);

            if (!isVerified) {
                JOptionPane.showMessageDialog(this, "Signature is not valid");
                return;
            }

            boolean success = Helper.addBlock(transactionCollection);
            loadProductTable(manufacturer.getID());
            if (success) {
                JOptionPane.showMessageDialog(this, "Product added successfully");
            } else {
                throw new Exception();
            }
//            addBlock(productData, publicKeyPath, privateKeyPath, "Product");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while reading Users.txt file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while adding product: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void txtProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductNameActionPerformed

    private void txtDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescActionPerformed

    private void txtBatchCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBatchCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBatchCodeActionPerformed

    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    private void tableProducts1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProducts1MouseClicked


    }//GEN-LAST:event_tableProducts1MouseClicked

    private void txtPDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPDateActionPerformed

    private void txtEDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEDateActionPerformed

    private void btnAddBatchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddBatchMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddBatchMouseExited

    private void btnAddBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBatchActionPerformed
        try {
            // Get the selected row's first column as ProductID from tableProducts1
            int selectedRow = tableProducts1.getSelectedRow();
            if (selectedRow == -1) {
                // If no row is selected, display a message
                JOptionPane.showMessageDialog(this, "Please select a product from the table.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String productUPC = tableProducts1.getValueAt(selectedRow, 3).toString();
            if (productUPC == "No products found") {
                // If no row is selected, display a message
                JOptionPane.showMessageDialog(this, "No Product Found.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Retrieve input from text fields
            String batchCode = txtBatchCode.getText();
            String price = txtPrice.getText();
            String quantity = txtQuantity.getText();
            String productionDate = txtPDate.getText();
            String expiryDate = txtEDate.getText();
            String todayDate = LocalDate.now().toString();
            String type = "002";

            // Auto-generate Batch ID
            String batchId = Helper.generateID("BATCH");
//            String batchUPC = Helper.generateID("BUPC");
//                    generateBatchId();

            // Get Manufacturer ID as userID
//            String manufacturerID = manufactur // Assuming userID is already set in the class
            // Read the Users.txt file to get the public and private key paths
            String publicKeyPath = manufacturer.getPublicKeyPath();
            String privateKeyPath = manufacturer.getPrivateKeyPath();

            if (publicKeyPath.isEmpty() || privateKeyPath.isEmpty()) {
                // Handle the case where the public/private key paths are not found
                // You may throw an exception, log an error, or handle it based on your application's logic
                // Optionally, show an error message to the user
                JOptionPane.showMessageDialog(this, "Public/private key paths not found for the user ID: " + manufacturer.getID(), "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method
            }

//            String status = "-";
            // Generate data string for the batch
            String batchData = type + "|" + manufacturer.getID() + "|" + batchId + "|" + productUPC + "|" + batchCode + "|" + price + "|" + quantity + "|" + productionDate + "|" + expiryDate + "|" + todayDate + "|" + manufacturer.getName() + "|" + manufacturer.getContact() + "|" + manufacturer.getCode();

            TransactionCollection transactionCollection = Helper.signTransaction(batchData, privateKeyPath);
            String transactionData = transactionCollection.getTranxList().get(0);

            boolean isVerified = Helper.systemVerifyTransaction(transactionData, publicKeyPath);

            if (!isVerified) {
                JOptionPane.showMessageDialog(this, "Signature is not valid");
                return;
            }

            // Call addData method to handle the addition
            boolean success = Helper.addBlock(transactionCollection);
            if (success) {
                JOptionPane.showMessageDialog(this, "Batch added successfully.");
            } else {
                throw new Exception();
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while adding batch: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddBatchActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnSearchUPCMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchUPCMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchUPCMouseExited

    private void btnSearchUPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchUPCActionPerformed
        try {
            String search = txtBookingID7.getText();
            if (!search.isEmpty()) {
                DefaultTableModel batchTableModel = (DefaultTableModel) tableBatch1.getModel();
                DefaultTableModel disTableModel = (DefaultTableModel) tableDetails.getModel();
                DefaultTableModel disTableModel1 = (DefaultTableModel) tableDetails1.getModel();

                // Clear existing data in the table
                batchTableModel.setRowCount(0);
                disTableModel.setRowCount(0);
                disTableModel1.setRowCount(0);
                selectedBatch1.setText("-");

                // Retrieve blockchain data
                Blockchain blockchain = Blockchain.getInstance("src/On_Chain/Blockchain.bin");
                LinkedList<Block> blockchainData = blockchain.get();

                // Flag to track if any batch is found for the selected product ID
                boolean batchFound = false;

                Symmetric symm = new Symmetric();
                Key secretKey = RandomSecretKey.getSecretKey();

                // Iterate through the blockchain to find batch info
                for (Block block : blockchainData) {
                    TransactionCollection transactionCollection = block.getTransactionCollection();
                    if (transactionCollection != null) {
                        ArrayList<String> transactions = transactionCollection.getTranxList();
                        for (String transaction : transactions) {
                            String decrypted = symm.decrypt(transaction, secretKey);
                            String[] transactionInfo = decrypted.split("\\|");
                            if ("002".equals(transactionInfo[0]) && transactionInfo[3].equals(search)) {
                                // Batch info found for the selected product ID
                                batchFound = true;
                                String batchCode = transactionInfo[4];
                                String price = transactionInfo[5];
                                String dateAdded = transactionInfo[9];
                                String productionDate = transactionInfo[7];
                                String expiryDate = transactionInfo[8];
                                String quantity = transactionInfo[6];

                                int totalQuantityFromPool = calculateQuantity(batchCode);
                                int sold = calculateSoldQuantity(batchCode);
                                int availableStock = Integer.parseInt(quantity) - totalQuantityFromPool - sold;

                                String status = "-";
                                if (availableStock <= 0) {
                                    status = "Out of Stock";
                                } else {
                                    status = "In Stock";
                                }
                                // Add batch info to the table
                                batchTableModel.addRow(new Object[]{batchCode, price, dateAdded, productionDate, expiryDate, quantity, totalQuantityFromPool, availableStock, sold, status});
                            }
                        }
                    }
                }

                // If no batch is found, display a message in the table
                if (!batchFound) {
                    batchTableModel.addRow(new Object[]{"No Batch Found", "", "", "", "", ""});
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchUPCActionPerformed

    private void txtBookingID7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBookingID7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBookingID7ActionPerformed

    private void tableDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDetailsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableDetailsMouseClicked

    private void btnResetSelectionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetSelectionMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnResetSelectionMouseExited

    private void btnResetSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetSelectionActionPerformed
        tableProducts.clearSelection();
        jLabel51.setText("-");
        tableBatch.clearSelection();
        DefaultTableModel batchTableModel = (DefaultTableModel) tableBatch.getModel();
        batchTableModel.setRowCount(0);
    }//GEN-LAST:event_btnResetSelectionActionPerformed

    private void btnAddProduct1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddProduct1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddProduct1MouseExited

    private void btnAddProduct1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProduct1ActionPerformed
        this.setVisible(false);
        new LoginMenu(Blockchain_Assignment.manufacturerController, Blockchain_Assignment.distributorController, Blockchain_Assignment.healthcareProviderController).setVisible(true);

    }//GEN-LAST:event_btnAddProduct1ActionPerformed

    private void btnResetSelection1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetSelection1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnResetSelection1MouseExited

    private void btnResetSelection1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetSelection1ActionPerformed
        tableProducts1.clearSelection();
        txtBatchCode.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
        txtPDate.setText("yyyy-mm-dd");
        txtEDate.setText("yyyy-mm-dd");
    }//GEN-LAST:event_btnResetSelection1ActionPerformed

    private void btnClearAddProMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAddProMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAddProMouseExited

    private void btnClearAddProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAddProActionPerformed
        txtProductName.setText("");
        txtDesc.setText("");
    }//GEN-LAST:event_btnClearAddProActionPerformed

    private void tableProducts2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProducts2MouseClicked
        DefaultTableModel tableModel = (DefaultTableModel) tableProducts2.getModel();
        int selectedRow = tableProducts2.getSelectedRow();

        if (selectedRow >= 0) {
            jLabel54.setText((String) tableModel.getValueAt(selectedRow, 3));
            jLabel56.setText((String) tableModel.getValueAt(selectedRow, 0));
        }
    }//GEN-LAST:event_tableProducts2MouseClicked

    private void btnSelectProductMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectProductMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSelectProductMouseExited

    private void btnSelectProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectProductActionPerformed
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tableProducts2.getModel();
            DefaultTableModel batchTableModel = (DefaultTableModel) tableBatch2.getModel();
            int selectedRow = tableProducts2.getSelectedRow();
            if ("-".equals(jLabel54.getText())) {
                JOptionPane.showMessageDialog(this, "Please choose a product to proceed. ");
            } else {
                tabDistribute1.setSelectedIndex(1);
                tabDistribute1.setEnabledAt(0, false);
                tabDistribute1.setEnabledAt(2, false);
                tabDistribute1.setEnabledAt(3, false);

                String selectedProductUPC = jLabel54.getText();
                if (selectedProductUPC.equals("-")) {
                    JOptionPane.showMessageDialog(this, "Please choose a product to proceed. ");
                }
                // Clear existing data in the table
                batchTableModel.setRowCount(0);

                // Retrieve blockchain data
                Blockchain blockchain = Blockchain.getInstance("src/On_Chain/Blockchain.bin");
                LinkedList<Block> blockchainData = blockchain.get();

                // Flag to track if any batch is found for the selected product ID
                boolean batchFound = false;
                Symmetric symm = new Symmetric();
                Key secretKey = RandomSecretKey.getSecretKey();

                // Iterate through the blockchain to find batch info
                for (Block block : blockchainData) {
                    TransactionCollection transactionCollection = block.getTransactionCollection();
                    if (transactionCollection != null) {
                        ArrayList<String> transactions = transactionCollection.getTranxList();
                        for (String transaction : transactions) {
                            String decrypted = symm.decrypt(transaction, secretKey);
                            String[] transactionInfo = decrypted.split("\\|");
                            if ("002".equals(transactionInfo[0]) && transactionInfo[3].equals(selectedProductUPC)) {
                                // Batch info found for the selected product ID
                                batchFound = true;
                                String batchCode = transactionInfo[4];
                                String price = transactionInfo[5];
                                String dateAdded = transactionInfo[9];
                                String productionDate = transactionInfo[7];
                                String expiryDate = transactionInfo[8];
                                String quantity = transactionInfo[6];

                                int totalQuantityFromPool = calculateQuantity(batchCode);
                                int sold = calculateSoldQuantity(batchCode);
                                int availableStock = Integer.parseInt(quantity) - totalQuantityFromPool - sold;

                                String status = "-";
                                if (availableStock > 0) {
                                    status = "In Stock";
                                    batchTableModel.addRow(new Object[]{batchCode, price, dateAdded, productionDate, expiryDate, quantity, totalQuantityFromPool, availableStock, sold, status});
                                }
                            }
                        }
                    }
                }

                // If no batch is found, display a message in the table
                if (!batchFound) {
                    batchTableModel.addRow(new Object[]{"No Batch Found", "", "", "", "", ""});
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSelectProductActionPerformed

    private void btnSelectBatchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectBatchMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSelectBatchMouseExited

    private void btnSelectBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectBatchActionPerformed
        if ("-".equals(selectedBatchNumberLabel.getText())) {
            JOptionPane.showMessageDialog(this, "Please choose a batch to proceed. ");
        } else {
            tabDistribute1.setSelectedIndex(2);
            tabDistribute1.setEnabledAt(0, false);
            tabDistribute1.setEnabledAt(1, false);
            tabDistribute1.setEnabledAt(3, false);
            String selectedBatchNo = selectedBatchNumberLabel.getText();

        }
    }//GEN-LAST:event_btnSelectBatchActionPerformed

    private void btnClearAddPro1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAddPro1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAddPro1MouseExited

    private void btnClearAddPro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAddPro1ActionPerformed
        tableBatch2.clearSelection();
        selectedBatchNumberLabel.setText("-");
    }//GEN-LAST:event_btnClearAddPro1ActionPerformed

    private void btnAddBatch1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddBatch1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddBatch1MouseExited

    private void btnAddBatch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBatch1ActionPerformed
        resetDistribution();
    }//GEN-LAST:event_btnAddBatch1ActionPerformed

    private void btnConfirmDistributionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConfirmDistributionMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnConfirmDistributionMouseExited

    private void btnConfirmDistributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmDistributionActionPerformed
        String type = "003";
        String senderID = manufacturer.getID();
        String batchNO = batchCodeSummaryLabel.getText();
        String UPC = upcSummaryLabel.getText();
        int quantity = Integer.parseInt(jLabel78.getText());
        String receiverID = jLabel80.getText();
        String price = priceLabel.getText();
        String productName = productNameSummaryLabel.getText();
        String todayDate = LocalDate.now().toString();

        try {
            Symmetric symm = new Symmetric();
            Key secretKey = RandomSecretKey.getSecretKey();
            Distributor d = Blockchain_Assignment.distributorController.getDistributor(receiverID);
            MySignature sig = new MySignature();
            PrivateKey privateKey = KeyAccess.getPrivateKey(manufacturer.getPrivateKeyPath());
            String transactionID = Helper.generateID("TX");
//            for (String data : dataList) {
            String Transaction = type + "|" + senderID + "|" + receiverID + "|" + UPC + "|" + batchNO + "|" + quantity + "|" + price + "|" + productName + "|" + d.getName() + "|" + d.getContact() + "|" + d.getCode() + "|" + todayDate;

            byte[] signature = sig.getSignature(Transaction, privateKey);
            String signedTranx = Transaction + "|" + Base64.getEncoder().encodeToString(signature) + "\n";
            String signedTransaction = transactionID + "|" + signedTranx;

            Files.write(Paths.get("src/Off_Chain/TransactionPoolMD"), signedTransaction.getBytes(), StandardOpenOption.APPEND);
            JOptionPane.showMessageDialog(this, "Distribution transaction confirmed and added to the pool.");

            resetDistribution();

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while adding transaction to pool: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity format. Please enter a valid integer value.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnConfirmDistributionActionPerformed

    private void tableBatch2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBatch2MouseClicked
        DefaultTableModel tableModel = (DefaultTableModel) tableBatch2.getModel();
        int selectedRow = tableBatch2.getSelectedRow();

        if (selectedRow >= 0) {
            selectedBatchNumberLabel.setText((String) tableModel.getValueAt(selectedRow, 0));
            priceLabel.setText((String) tableModel.getValueAt(selectedRow, 2));

        }
    }//GEN-LAST:event_tableBatch2MouseClicked

    private void btnClearAddPro2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAddPro2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAddPro2MouseExited

    private void btnClearAddPro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAddPro2ActionPerformed
        tableProducts2.clearSelection();
        jLabel54.setText("-");
        jLabel56.setText("-");
    }//GEN-LAST:event_btnClearAddPro2ActionPerformed

    private void tabBookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabBookingMouseClicked
        tabDistribute1.setEnabledAt(1, false);
        tabDistribute1.setEnabledAt(2, false);
        tabDistribute1.setEnabledAt(3, false);
    }//GEN-LAST:event_tabBookingMouseClicked

    private void btnClearAddPro3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAddPro3MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAddPro3MouseExited

    private void btnClearAddPro3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAddPro3ActionPerformed
        tabDistribute1.setSelectedIndex(0);
        tabDistribute1.setEnabledAt(1, false);
        tabDistribute1.setEnabledAt(2, false);
        tabDistribute1.setEnabledAt(3, false);
    }//GEN-LAST:event_btnClearAddPro3ActionPerformed

    private void tableBatch2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBatch2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableBatch2MouseEntered

    private void btnSelectBatch1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectBatch1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSelectBatch1MouseExited

    private void btnSelectBatch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectBatch1ActionPerformed
        DefaultTableModel tableModel1 = (DefaultTableModel) tableBatch2.getModel();
        DefaultTableModel tableModel2 = (DefaultTableModel) tableDistributor.getModel();
        DefaultTableModel tableModel3 = (DefaultTableModel) tableProducts2.getModel();
        int selectedRow1 = tableBatch2.getSelectedRow();
        int selectedRow2 = tableDistributor.getSelectedRow();
        int selectedRow3 = tableProducts2.getSelectedRow();
        String Quantity = txtDISQuantity.getText();
        String price = (String) tableModel1.getValueAt(selectedRow1, 1);

        if ("-".equals(jLabel61.getText())) {
            JOptionPane.showMessageDialog(this, "Please choose a distributor to proceed. ");
        } else {

            if (Quantity == null || Quantity.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter Quantity.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int totalPrice = Integer.parseInt(Quantity) * Integer.parseInt(price);
                tabDistribute1.setSelectedIndex(3);
                tabDistribute1.setEnabledAt(0, false);
                tabDistribute1.setEnabledAt(1, false);
                tabDistribute1.setEnabledAt(2, false);

                productIDSummaryLabel.setText((String) tableModel3.getValueAt(selectedRow3, 0));
                productNameSummaryLabel.setText((String) tableModel3.getValueAt(selectedRow3, 1));
                batchCodeSummaryLabel.setText((String) tableModel1.getValueAt(selectedRow1, 0));
                upcSummaryLabel.setText((String) tableModel3.getValueAt(selectedRow3, 3));
                jLabel78.setText(Quantity);
                priceLabel.setText(Integer.toString(totalPrice));
//                jLabel80.setText((String) tableModel2.getValueAt(selectedRow1, 0));
//                jLabel79.setText((String) tableModel2.getValueAt(selectedRow1, 1));
            }
        }
    }//GEN-LAST:event_btnSelectBatch1ActionPerformed

    private void btnClearAddPro4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAddPro4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAddPro4MouseExited

    private void btnClearAddPro4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAddPro4ActionPerformed
        tableDistributor.clearSelection();
        jLabel61.setText("-");
        txtDISQuantity.setText("");
    }//GEN-LAST:event_btnClearAddPro4ActionPerformed

    private void tableDistributorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDistributorMouseClicked
        DefaultTableModel tableModel = (DefaultTableModel) tableDistributor.getModel();
        int selectedRow = tableDistributor.getSelectedRow();

        if (selectedRow >= 0) {
            jLabel61.setText((String) tableModel.getValueAt(selectedRow, 0));
            jLabel80.setText((String) tableModel.getValueAt(selectedRow, 0));
            jLabel79.setText((String) tableModel.getValueAt(selectedRow, 1));
        }
    }//GEN-LAST:event_tableDistributorMouseClicked

    private void tableDistributorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDistributorMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableDistributorMouseEntered

    private void btnClearAddPro5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAddPro5MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAddPro5MouseExited

    private void btnClearAddPro5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAddPro5ActionPerformed
        tabDistribute1.setSelectedIndex(1);
        tabDistribute1.setEnabledAt(0, false);
        tabDistribute1.setEnabledAt(2, false);
        tabDistribute1.setEnabledAt(3, false);
    }//GEN-LAST:event_btnClearAddPro5ActionPerformed

    private void txtDISQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDISQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDISQuantityActionPerformed

    private void btnClearAddPro6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearAddPro6MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearAddPro6MouseExited

    private void btnClearAddPro6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAddPro6ActionPerformed
        tabDistribute1.setSelectedIndex(2);
        tabDistribute1.setEnabledAt(0, false);
        tabDistribute1.setEnabledAt(3, false);
        tabDistribute1.setEnabledAt(1, false);
    }//GEN-LAST:event_btnClearAddPro6ActionPerformed

    private void tableProductsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductsMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableProductsMouseEntered

    private void tableBatch1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBatch1MouseClicked
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tableBatch1.getModel();
            int selectedRow = tableBatch1.getSelectedRow();
            selectedBatch1.setText((String) tableModel.getValueAt(selectedRow, 0));
            if (selectedRow >= 0) {
                String selectedBatchNo = (String) tableModel.getValueAt(selectedRow, 0);
                DefaultTableModel disTableModel = (DefaultTableModel) tableDetails.getModel();
                DefaultTableModel disTableModel1 = (DefaultTableModel) tableDetails1.getModel();

                // Clear existing data in the table
                disTableModel.setRowCount(0);
                disTableModel1.setRowCount(0);
                // Retrieve blockchain data
                Blockchain blockchain = Blockchain.getInstance("src/On_Chain/Blockchain.bin");
                LinkedList<Block> blockchainData = blockchain.get();
                boolean distributionFound = false;
                boolean distributionFound1 = false;
                Symmetric symm = new Symmetric();
                Key secretKey = RandomSecretKey.getSecretKey();

                try (BufferedReader reader = new BufferedReader(new FileReader("src/Off_Chain/TransactionPoolMD"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        String batchCode = parts[5];
                        if (batchCode.equals(selectedBatchNo)) {
                            String receiverID = parts[3];
                            int quantity = Integer.parseInt(parts[6]);
                            distributionFound1 = true;
                            Distributor distributor1 = distributorController.getDistributor(receiverID);
                            disTableModel1.addRow(new Object[]{distributor1.getID(), distributor1.getName(), distributor1.getCode(), distributor1.getContact(), quantity});
                        }
                    }
                } catch (IOException | NumberFormatException e) {
                    e.printStackTrace();
                }

                // Iterate through the blockchain to find batch info
                for (Block block : blockchainData) {
                    TransactionCollection transactionCollection = block.getTransactionCollection();
                    if (transactionCollection != null) {
                        ArrayList<String> transactions = transactionCollection.getTranxList();
                        for (String transaction : transactions) {
                            String decryptedTransaction = symm.decrypt(transaction, secretKey);
                            String[] transactionInfo = decryptedTransaction.split("\\|");
                            if ("003".equals(transactionInfo[0]) && transactionInfo[4].equals(selectedBatchNo)) {
                                // Batch info found for the selected product ID
                                distributionFound = true;
                                String receiverID = transactionInfo[2];
                                String quantity = transactionInfo[5];
                                Distributor distributor = distributorController.getDistributor(receiverID);

                                // Add batch info to the table
                                disTableModel.addRow(new Object[]{receiverID, distributor.getName(), distributor.getCode(), distributor.getContact(), quantity});
                            }
                        }
                    }
                }

                // If no batch is found, display a message in the table
                if (!distributionFound) {
                    disTableModel.addRow(new Object[]{"Not Found", "", "", "", "", ""});
                }
                if (!distributionFound1) {
                    disTableModel1.addRow(new Object[]{"Not Found", "", "", "", "", ""});
                }
            }
        } catch (Exception e) {
            e.printStackTrace(); // Handle the exception by printing the stack trace or handle it appropriately.
        }
        
    }//GEN-LAST:event_tableBatch1MouseClicked

    private void btnDisResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDisResetMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDisResetMouseExited

    private void btnDisResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisResetActionPerformed
        txtBookingID7.setText("UPC...");
        tableBatch1.clearSelection();
        tableDetails.clearSelection();
        tableDetails1.clearSelection();
        selectedBatch1.setText("-");
        DefaultTableModel disTableModel = (DefaultTableModel) tableDetails.getModel();
        DefaultTableModel disTableModel1 = (DefaultTableModel) tableDetails1.getModel();
        DefaultTableModel batchTableModel = (DefaultTableModel) tableBatch1.getModel();
        disTableModel.setRowCount(0);
        disTableModel1.setRowCount(0);
        batchTableModel.setRowCount(0);
    }//GEN-LAST:event_btnDisResetActionPerformed

    private void tableDetails1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDetails1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableDetails1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManufacturerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManufacturerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManufacturerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManufacturerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new ManufacturerFrame(manufacturer).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel batchCodeSummaryLabel;
    private javax.swing.JButton btnAddBatch;
    private javax.swing.JButton btnAddBatch1;
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnAddProduct1;
    private javax.swing.JButton btnClearAddPro;
    private javax.swing.JButton btnClearAddPro1;
    private javax.swing.JButton btnClearAddPro2;
    private javax.swing.JButton btnClearAddPro3;
    private javax.swing.JButton btnClearAddPro4;
    private javax.swing.JButton btnClearAddPro5;
    private javax.swing.JButton btnClearAddPro6;
    private javax.swing.JButton btnConfirmDistribution;
    private javax.swing.JButton btnDisReset;
    private javax.swing.JButton btnResetSelection;
    private javax.swing.JButton btnResetSelection1;
    private javax.swing.JButton btnSearchUPC;
    private javax.swing.JButton btnSelectBatch;
    private javax.swing.JButton btnSelectBatch1;
    private javax.swing.JButton btnSelectProduct;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblRapidCar1;
    private javax.swing.JLabel lblRapidCar11;
    private javax.swing.JLabel lblRapidCar12;
    private javax.swing.JLabel lblRapidCar2;
    private javax.swing.JLabel lblRapidCar3;
    private javax.swing.JLabel lblRapidCar4;
    private javax.swing.JLabel lblRapidCar5;
    private javax.swing.JLabel lblRapidCar6;
    private javax.swing.JLabel lblRapidCar7;
    private javax.swing.JLabel lblRapidCar8;
    private javax.swing.JPanel pnlBookRoom1;
    private javax.swing.JPanel pnlBookRoom2;
    private javax.swing.JPanel pnlBookRoom3;
    private javax.swing.JPanel pnlBookRoom4;
    private javax.swing.JPanel pnlBookRoom5;
    private javax.swing.JPanel pnlBookRoom6;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel productIDSummaryLabel;
    private javax.swing.JLabel productNameSummaryLabel;
    private javax.swing.JLabel selectedBatch1;
    private javax.swing.JLabel selectedBatchNumber;
    private javax.swing.JLabel selectedBatchNumberLabel;
    private javax.swing.JTabbedPane tabBooking;
    private javax.swing.JTabbedPane tabDistribute1;
    private javax.swing.JTable tableBatch;
    private javax.swing.JTable tableBatch1;
    private javax.swing.JTable tableBatch2;
    private javax.swing.JTable tableDetails;
    private javax.swing.JTable tableDetails1;
    private javax.swing.JTable tableDistributor;
    private javax.swing.JTable tableProducts;
    private javax.swing.JTable tableProducts1;
    private javax.swing.JTable tableProducts2;
    private javax.swing.JTextField txtBatchCode;
    private javax.swing.JTextField txtBookingID7;
    private javax.swing.JTextField txtDISQuantity;
    private javax.swing.JTextField txtDesc;
    private javax.swing.JTextField txtEDate;
    private javax.swing.JTextField txtPDate;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JLabel upcSummaryLabel;
    // End of variables declaration//GEN-END:variables
}
